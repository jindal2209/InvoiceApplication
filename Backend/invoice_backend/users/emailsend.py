import smtplib,os
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.base import MIMEBase
from email import encoders
from fpdf import FPDF
from PIL import Image,ImageOps

TABLE_COL_NAMES = ("Item Id","Item Name", "Qty", "Item Price", "Total Price")	
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
	
def render_table_header(pdf):
    pdf.set_font("times", size=10)
    line_height = pdf.font_size * 2
    col_width = pdf.epw / len(TABLE_COL_NAMES)  # distribute content evenly

    pdf.set_font('times','B')  # enabling bold text
    for col_name in TABLE_COL_NAMES:
        pdf.cell(col_width, line_height, col_name, border=1,align='C')
    pdf.ln(0)
    pdf.set_font(style="")

def createInvoicePDF(customer_name,invoice_id,invoice_date,company_name,customer_email,invoice_items_list,total_amount):
    try:
        pdf = FPDF('P','mm','A4')
        pdf.add_page()
        pdf.set_image_filter("DCTDecode")

        # variables
        line_height = pdf.font_size * 2
        col_width = pdf.epw / len(TABLE_COL_NAMES)  # distribute content evenly
        font_face = 'times'
        logo_path = '{p}/logo.png'.format(p=BASE_DIR)
        pdf_path = '{p}/INVOICE_{pdf_name}.pdf'.format(pdf_name=invoice_id,p=BASE_DIR)
        filename = 'INVOICE_{id}.pdf'.format(id=invoice_id)

        # logo
        img = Image.open(logo_path)
        img = img.resize((80,30))
        img = ImageOps.expand(img,border=1)
        pdf.image(img, x=10, y=5,alt_text='LOGO')

        # header
        pdf.set_font(font_face,'BU',25)
        pdf.cell(w=0,txt='INVOICE\n',align='R')

        # details
        pdf.ln(15)
        pdf.set_font(font_face,'B',10 )
        pdf.cell(txt='Company: {company}'.format(company=company_name))
        pdf.ln(5)
        pdf.cell(txt='Invoice Date: {gd}'.format(gd=invoice_date))
        pdf.ln(5)
        pdf.cell(txt='Invoice ID: {regn}'.format(regn=invoice_id))
        pdf.ln(5)
        pdf.cell(txt='Customer Name: {customer}'.format(customer=customer_name))
        pdf.ln(5)
        pdf.cell(txt='Email: {gd}'.format(gd=customer_email))
        pdf.ln(10)

        render_table_header(pdf)
        pdf.ln(line_height)

        for row in invoice_items_list:
            if pdf.will_page_break(line_height):
                render_table_header(pdf)
            for datum in row:
                val = row[datum]
                pdf.cell(col_width, line_height, str(val), border=1,align='C')
            pdf.set_text_color(0,0,0)
            pdf.ln(line_height)
        
        pdf.ln(10)
        pdf.set_font('times','B')  # enabling bold text
        pdf.cell(w=0,txt='Total Amount: {gd}'.format(gd=total_amount),align='R')
        pdf.set_font(style="")
        pdf.output(pdf_path)

        return [pdf_path,filename]
    except Exception as e:
        print(e)

def sendMail(invoice_id, company_name, invoice_items_list, customer_name, customer_email_id, total_amount,invoice_date):
    email_user = 'techcse2020@bpitindia.com'
    email_password = 'Bpit@1234'
    
    # instance of MIMEMultipart
    msg = MIMEMultipart()

    # storing the senders email address  
    msg['From'] = email_user

    # storing the receivers email address 
    msg['To'] = customer_email_id

    # storing the subject 
    msg['Subject'] = "Invoice Receipt (Invoice no - {invoice_id})".format(invoice_id=invoice_id)

    # string to store the body of the mail
    body = '''
            Hi, {customer_name} 
            Your invoice for amount {total_amount} is generated by {company_name}
            Kindly pay the pending amount using this link: https://jindal2209.github.io/InvoiceApplication/#/invoice/{invoice_id}
            For the detailed invoice you can download the attached pdf.
        '''.format(customer_name=customer_name,total_amount=total_amount/100,company_name=company_name,invoice_id=invoice_id)

    # attach the body with the msg instance
    msg.attach(MIMEText(body, 'plain'))
    [file_path,filename] = createInvoicePDF(customer_name,invoice_id,invoice_date,company_name,customer_email_id,invoice_items_list,total_amount)    
    attachment = open(file_path, "rb")
    p = MIMEBase('application', 'octet-stream')
    
    # To change the payload into encoded form
    p.set_payload((attachment).read())

    # encode into base64
    encoders.encode_base64(p)
    
    p.add_header('Content-Disposition', "attachment; filename= %s" % filename)
    
    # attach the instance 'p' to instance 'msg'
    msg.attach(p)

    try:
        smtp_server = smtplib.SMTP_SSL('smtp.gmail.com', 465)
        smtp_server.ehlo()
        smtp_server.login(email_user, email_password)
        # Converts the Multipart msg into a string
        text = msg.as_string()
        smtp_server.sendmail(email_user, customer_email_id, text)
        smtp_server.close()
        print ("Email sent successfully!")
    except Exception as ex:
        print("Something went wrong")

def sendPaymentConfirmationMail(invoice_id,customer_name,customer_email_id,total_amount):
    print(invoice_id,customer_name,customer_email_id,total_amount)
    email_user = 'techcse2020@bpitindia.com'
    email_password = 'Bpit@1234'
    
    # instance of MIMEMultipart
    msg = MIMEMultipart()

    # storing the senders email address  
    msg['From'] = email_user

    # storing the receivers email address 
    msg['To'] = customer_email_id

    # storing the subject 
    msg['Subject'] = "Invoice Payment Confirmation (Invoice no - {invoice_id})".format(invoice_id=invoice_id)

    # string to store the body of the mail
    body = '''
            Hi, {customer_name} 
            Your payment of amount {total_amount} for invoice number {invoice_id} is successful
            You can check status using this link: https://jindal2209.github.io/InvoiceApplication/#/invoice/{invoice_id}
        '''.format(customer_name=customer_name,total_amount=total_amount/100,invoice_id=invoice_id)

    # attach the body with the msg instance
    msg.attach(MIMEText(body, 'plain'))
    
    try:
        smtp_server = smtplib.SMTP_SSL('smtp.gmail.com', 465)
        smtp_server.ehlo()
        smtp_server.login(email_user, email_password)
        # Converts the Multipart msg into a string
        text = msg.as_string()
        smtp_server.sendmail(email_user, customer_email_id, text)
        smtp_server.close()
        print ("Email sent successfully!")
    except Exception as ex:
        print(ex,'inner')